219. Contains Duplicate II

Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.

Brute force

public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        
        for(int i = 0; i < nunms.length; i++){
        	for(j = Math.max(i - k, 0); j < i; j++){
        		if(nums[i] == nums[j]){
        			return true;
        		}
        	}
        }
        
        return false;
    }
}

time: O(n*min(k,n))
space: O(1)

public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> set = new TreeSet();
       
        for(int i = 0; i < nums.length; i++){
            
            if(set.contains(nums[i])){
                return true;
            }
            
            set.add(nums[i]);
            if(set.size() > k){
                set.remove(nums[i - k]);
            }
        }
        
        return false;
    }
}

TreeSet's insert, delete, search take log(n) time.
time: O(nLog(min(n,k)))
space: O(min(k,n))



public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> set = new HashSet();
       
        for(int i = 0; i < nums.length; i++){
            
            if(set.contains(nums[i])){
                return true;
            }
            
            set.add(nums[i]);
            if(set.size() > k){
                set.remove(nums[i - k]);
            }
        }
        
        return false;
    }
}

HashSet's insert, delete, search take O(n)

time: O(n)
space:(min(k, n))