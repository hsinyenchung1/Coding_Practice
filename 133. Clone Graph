 133. Clone Graph

 Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/

         /**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        
        //1. node -> nodes get all the nodes into a arraylist
        //2. copy all the node from nodes 
        //3. copy neighbor for all the nodes
        if(node == null){
            return node;
        }
        
        //step 1.
        List<UndirectedGraphNode> nodes = getNodes(node);
        
        //step 2.
        Map<UndirectedGraphNode, UndirectedGraphNode> mapping = new HashMap<>();
        for(UndirectedGraphNode n : nodes){
            mapping.put(n, new UndirectedGraphNode(n.label));
        }
        
        //step 3.
        for(UndirectedGraphNode n : nodes){
            UndirectedGraphNode newNode = mapping.get(n);
            for(UndirectedGraphNode neighbor : n.neighbors){
                UndirectedGraphNode newNeighbor = mapping.get(neighbor);
                newNode.neighbors.add(newNeighbor);
            }
        }
        
        return mapping.get(node);
        
    }
    
    private List<UndirectedGraphNode> getNodes (UndirectedGraphNode node){
        
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        Set<UndirectedGraphNode> visited = new HashSet<>();
        
        queue.offer(node);
        visited.add(node);
        while(!queue.isEmpty()){
            UndirectedGraphNode current = queue.poll();
           for(UndirectedGraphNode neighbor : current.neighbors){
               if(!visited.contains(neighbor)){
                   visited.add(neighbor);
                   queue.offer(neighbor);
               }
           }
        }
        
        return new ArrayList<UndirectedGraphNode>(visited);
        
    }
    
    
}