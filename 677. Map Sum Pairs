677. Map Sum Pairs

Implement a MapSum class with insert, and sum methods.

For the method insert, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.

For the method sum, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.

Example 1:
Input: insert("apple", 3), Output: Null
Input: sum("ap"), Output: 3
Input: insert("app", 2), Output: Null
Input: sum("ap"), Output: 5

answer 1:

class MapSum {
    Map<String,Integer> map;

    public MapSum() {
        map = new HashMap<>();
    }
    
    public void insert(String key, int val) {
        map.put(key, val);
    }
    
    public int sum(String prefix) {
        int count = 0;
        for(String str : map.keySet()){
        	if(str.startsWith(prefix)){
        		count += map.get(str);
        	}
        }

        return count;
    }
}

insert()
time: O(1)

sum()
time: O(n * p) n is the number of items in the map, p is the length of the input prefix
space: O(n) all keys and values

answer 2:
class MapSum {
    Map<String,Integer> map;
    Map<String,Integer> score;

    public MapSum() {
        map = new HashMap<>();
        score = new HashMap<>();
    }
    
    public void insert(String key, int val) {
        int delta = val - map.getOrDefault(key, 0);
        map.put(key, val);
        String prefix = "";
        for(char c : key.toCharArray()){
            prefix += c;
            score.put(prefix, score.getOrDefault(prefix, 0) + delta);
        }
    }
    
    public int sum(String prefix) {
        return score.getOrDefault(prefix, 0);
    }
}

insert()
time: O(k^2) K is length of the key 

sum()
time: O(1)





