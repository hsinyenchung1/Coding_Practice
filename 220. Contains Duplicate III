220. Contains Duplicate III

Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

Brute force:

public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    for (int i = 0; i < nums.length; ++i) {
        for (int j = Math.max(i - k, 0); j < i; ++j) {
            if (Math.abs(nums[i] - nums[j]) <= t) return true;
        }
    }
    return false;
}

time: O(n*min(k,n))
space: O(1)

class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeSet<Integer> set = new TreeSet();
        
        for(int i = 0; i < nums.length; i++){
            
            Integer s = set.ceiling(nums[i]);
            if (s != null && s <= nums[i] + t){
               return true; 
            } 

            Integer g = set.floor(nums[i]);
            if (g != null && nums[i] <= g + t){
                return true;
            }
            
            set.add(nums[i]);
            if (set.size() > k) {
                set.remove(nums[i - k]);
            }

        }
        
        return false;
    }
}

time: O(nlog(min(n,k)))
space: O(min(n,k))