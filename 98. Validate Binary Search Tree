98. Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


class Solution {
    
    class ResultType{
        int maxValue;
        int minValue;
        boolean isBalance;

        ResultType(int maxValue, int minValue, boolean isBalance){
            this.maxValue = maxValue;
            this.minValue = minValue;
            this.isBalance = isBalance;
        }
    }
    
    public boolean isValidBST(TreeNode root) {
        if(root == null){
            return true;
        }
        ResultType result = helper(root);
        return result.isBalance;
    }
    
    
    private ResultType helper(TreeNode root){
        
        if(root == null){
            return new ResultType(Integer.MIN_VALUE, Integer.MAX_VALUE, true);
        }
        
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        if(!left.isBalance || !right.isBalance){
            return new ResultType(0, 0, false);
        }
        
        if(root.left != null && left.maxValue >= root.val || root.right != null && right.minValue <= root.val){
            return new ResultType(0, 0, false);
        }
        
        return new ResultType(
            Math.max(root.val, right.maxValue),
            Math.min(root.val, left.minValue),
            true
        );
    }
}