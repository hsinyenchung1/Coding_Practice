78. Subsets

Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums == null){
            return null;
        }
        
        if(nums.length == 0){
            result.add(new ArrayList<Integer>());
            return result;
        }
        
        Arrays.sort(nums);
        
        helper(result, new ArrayList<Integer>(), 0, nums);
        
        return result;
        
    }
    
    public void helper(List<List<Integer>> result, List<Integer> currentSubset, int startIndex, int[] nums){
        
        result.add(new ArrayList<Integer>(currentSubset));
        
        for(int i = startIndex; i < nums.length; i++){
            currentSubset.add(nums[i]);
            helper(result, currentSubset, i + 1, nums);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}