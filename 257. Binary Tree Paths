257. Binary Tree Paths

Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */



public class solution{
    
    pulbic List<String> binaryTreePaths(TreeNode root){
        List<Stirng> paths = new ArrayList<String>();

        if(root == null){
            return paths;
        }

        if(root.left == null && root.right == null){
            paths.add("" + root.val);
            return paths;
        }

        List<String> leftPahts = binaryTreePaths(root.left);
        List<String> rightPaths = binaryTreePaths(root.right);

        

        for(String path : leftPaths){
            paths.add(root.val + "->" + path);
        }

        for(String path : rightPaths){
            paths.add(root.val + "->" + path);
        }

        return paths;

    }
}



class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<String>();
        
        if(root == null){
            return paths;
        }
        
        if(root.left == null && root.right == null){
            paths.add("" + root.val);
            return paths;
        }
        
        List<String> leftPaths = binaryTreePaths(root.left);
        List<String> rightPaths = binaryTreePaths(root.right);
        
        
        
        for(String path : leftPaths){
            paths.add(root.val + "->" + path);    
        }
        for(String path : rightPaths){
            paths.add(root.val + "->" + path);
        }
        
        return paths;
        
    }
}